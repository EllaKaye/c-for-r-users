---
title: C for R users
author: Ella Kaye
date: 2024-07-10
date-format: long
format: 
  warwickpres-revealjs: 
    title-slide-attributes: 
      data-background-image: warwick-logo-white.png
      data-background-size: 15%
      data-background-position: 100% 0%
execute:
  echo: true
---

## About me 

::: {.incremental}
- Research Software Engineer at University of Warwick
- Sustainability and EDI in the R Project
- R user/developer for 10 years
- Learning C for about a year
:::

## What is C and how does it relate to R?

## Why C?

### As R users

- encounter C code when debugging

### As R contributors

- find root cause of bug 
- propose a patch to the C code to fix a bug

### As R developers

- Write efficient, portable code

# R developers {.inverse}

## Limits of R

Sometimes you reach the limits of R:

- Your code is still slow despite optimizing the computational approach and the R implementation
- You could speed up the R code, but it results in very obscure, convoluted code

In these case it can make sense to code parts in C or C++.

## Typical scenarios

- Loops that can’t be vectorized because iterations depend on previous results
- Recursive functions, or problems which involve calling functions millions of times.
- Problems that require advanced data structures and algorithms that R doesn’t provide.

## You *almost certainly* want C++ with Rcpp

- Protects you from many of the historical idiosyncracies of R's C API
- Takes care of memory management
- Provides many useful helper methods

## But you *might* want/need C

- Portability (e.g. can also call from Python)
- Building on other people's C code

# R users/programmers {.inverse}

## Something is not quite right

```{r}
a <- c(8.48, 9.58, 9.96)
stem(a)
```

## Check the code


# R contributors {.inverse}

# 3-digit hex case-study {.inverse}

## The original idea

Want, e.g. "#ba1" to be interpretted as "#bbaa11".

{{< mastodon https://fosstodon.org/@coolbutuseless/110972696890598490 >}}

## The existing code 

:::{.smaller80}
```{.r}
static rcolor rgb2col(const char *rgb)
{
    unsigned int r = 0, g = 0, b = 0, a = 0; /* -Wall */
    if(rgb[0] != '#')
	      error(_("invalid RGB specification"));
    switch (strlen(rgb)) {
    case 9:
	      a = 16 * hexdigit(rgb[7]) + hexdigit(rgb[8]);
    case 7:
	      r = 16 * hexdigit(rgb[1]) + hexdigit(rgb[2]);
	      g = 16 * hexdigit(rgb[3]) + hexdigit(rgb[4]);
	      b = 16 * hexdigit(rgb[5]) + hexdigit(rgb[6]);
	      break;
    default:
	      error(_("invalid RGB specification"));
    }

    if(strlen(rgb) == 7) 
        return R_RGB(r, g, b);
    else
        return R_RGBA(r, g, b, a);
}
```
:::

## The fix: part 1

:::{.smaller90}
```{r}
#| eval: false
#| code-line-numbers: "9-16" 
switch (strlen(rgb)) {
case 9:
    a = 16 * hexdigit(rgb[7]) + hexdigit(rgb[8]);
case 7:
    r = 16 * hexdigit(rgb[1]) + hexdigit(rgb[2]);
    g = 16 * hexdigit(rgb[3]) + hexdigit(rgb[4]);
    b = 16 * hexdigit(rgb[5]) + hexdigit(rgb[6]);
    break;
case 5: 
  // Equivalent to 16 * hexdigit(rgb[4]) + hexdigit(rgb[4]);
  a = (16 + 1) * hexdigit(rgb[4]);
case 4:
  r = (16 + 1) * hexdigit(rgb[1]);
  g = (16 + 1) * hexdigit(rgb[2]);
  b = (16 + 1) * hexdigit(rgb[3]);
  break;
default:
    error(_("invalid RGB specification"));
}
```
:::

## The fix: part 2
```{r}
#| eval: false
switch(strlen(rgb)) {
case 7: 
case 4:
    return R_RGB(r, g, b);
default:
    return R_RGBA(r, g, b, a);
}
```

# Learning more {.inverse}

## C study group 

<https://contributor.r-project.org/events/c-study-group-2024/>

- Will run again January--June 2025, details TBC

- Monthly meetings, weekly suggestions

- Work through sessions 1-5 of Harvard's CS50 course

  [cs50.harvard.edu/x](https://cs50.harvard.edu/x)
- R's C API

## Resources: R's C API

- Deep R: <https://deepr.gagolewski.com/chapter/310-compiled.html>
- Advanced R, Hadley Wickham, (1st edn): <http://adv-r.had.co.nz/C-interface.html>
- Now You C Me, Davis Vaughn: <https://blog.davisvaughan.com/posts/2019-03-02-now-you-c-me>
- Writing R Extensions (Ch 5 and 6): <https://cran.stat.auckland.ac.nz/doc/manuals/r-devel/R-exts.html>
- R internals (Hadley Wickham): <https://github.com/hadley/r-internals>
- R internals (R Core): <https://cran.stat.auckland.ac.nz/doc/manuals/r-devel/R-ints.html>

```{=html}
<!-- needs to be last chunk of presentation otherwise creates an extra slide -->
<!-- requires Quarto v1.3 -->
<!-- tint80 for border, tint20 for title -->
<!-- this should hopefully no longer be necessary in a future version of Quarto -->
<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->
<style type="text/css">
div.callout-note {
  border-left-color: #00A9CE !important;
}

div.callout-note.callout-style-default .callout-title {
  background-color: #B3E5F0 !important;
}

div.callout-warning {
  border-left-color: #CB333B !important;
}

div.callout-warning.callout-style-default .callout-title {
  background-color: #EEC3C3 !important;
}

div.callout-tip {
  border-left-color: #6DCDB8 !important;
}

div.callout-tip.callout-style-default .callout-title {
  background-color: #D3F0EB !important;
}

div.callout-important {
  border-left-color: #F1BE48 !important;
}

div.callout-important.callout-style-default .callout-title {
  background-color: #FAECC8 !important;
}

div.callout-caution {
  border-left-color: #E87722 !important;
}

div.callout-caution.callout-style-default .callout-title {
  background-color: #F8D5BC !important;
}
</style>
```

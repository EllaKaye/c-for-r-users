---
title: C for R users
author: 
  - name: Ella Kaye
  - name: useR! 2024, Salzburg
format: 
  warwickpres-revealjs: 
    title-slide-attributes: 
      data-background-image: warwick-logo-white.png
      data-background-size: 15%
      data-background-position: 100% 0%
    width: 1200
    height: 675
execute:
  echo: true
---

## {background-image="images/r_sprint_group_friday.jpeg" background-size="contain"}

## Background

- Research Software Engineer at University of Warwick
- Sustainability and EDI in the R Project (with Heather Turner)

. . .

<br>

:::{.center-h .larger200 .primary}
Fostering a larger, more diverse community of contributors to base R
:::


## This talk

### What I'll do

- Encourage you to learn C
- Show you some C code in base R
- Encourage you to contribute to base R

:::{.fragment}
### What I won't do

- Assume you know any C
- Try to teach you any C
:::

## What is C and how does it relate to R?

:::{.incremental}
- C is a low-level, high-performance, compiled programming language
- It provides fine-grained control over memory and hardware
- Much of base R is written in C
- R provides interfaces to compiled code
- R has a C API to deal with R objects in C
:::

:::{.notes}
C is a compiled language, meaning its code is translated directly into machine code by a compiler before execution, resulting in fast and efficient programs. In contrast, R is an interpreted language where code is executed line-by-line by an interpreter, typically resulting in slower performance but greater ease of use for tasks like statistical analysis and data manipulation.
:::

## Why C?

### As R users/developers

- Write efficient, portable code
  - for efficiency, *almost certainly* want C++ with **Rcpp**
- Encounter C code when debugging

### As R contributors

- Find root cause of bug 
- Propose a patch to the C code to fix a bug


## Limits of R {visibility="hidden"}

Sometimes you reach the limits of R:

- Your code is still slow despite optimizing the computational approach and the R implementation
- You *could* speed up the R code, but it results in very obscure, convoluted code

In these cases it can make sense to code parts in C or C++ and call it from R.

## Typical scenarios {visibility="hidden"}

- Loops that can’t be vectorized because iterations depend on previous results
- Recursive functions, or problems which involve calling functions millions of times
- Problems that require advanced data structures and algorithms that R doesn’t provide

## You *almost certainly* want C++ with Rcpp {visibility="hidden"}

- Protects you from many of the historical idiosyncracies of R's C API
- Takes care of memory management
- Provides many useful helper methods

## But you *might* want/need C {visibility="hidden"}

- Portability (e.g. can also call from Python)
- Building on other people's C code

# {background-image="images/stem-bug.jpg"}

## Irregularity in `stem()` display

<https://bugs.r-project.org/show_bug.cgi?id=8934>

```{r}
a <- c(8.48, 9.58, 9.96)
stem(a)
stem(2)
stem(c(2, 2))
```

## Check the code

```{.r}
stem
```

```{r}
#| eval: false
#| code-line-numbers: "|13" 
function (x, scale = 1, width = 80, atom = 1e-08) 
{
    if (!is.numeric(x)) 
        stop("'x' must be numeric")
    x <- x[is.finite(x)]
    n <- as.integer(length(x))
    if (is.na(n)) 
        stop("invalid length(x)")
    if (n == 0) 
        stop("no finite and non-missing values")
    if (scale <= 0) 
        stop("'scale' must be positive")
    .Call(C_StemLeaf, as.double(x), scale, width, atom)
    invisible(NULL)
}
```


## There's C!

```{r}
#| error: true
#| output-location: fragment
C_StemLeaf
```

## Where's C?

[github.com/r-devel/r-svn](https://github.com/r-devel/r-svn)

![](images/C_StemLeaf-search.png)


## `C_StemLeaf()`

R's C API

```{r}
#| eval: false
#| code-line-numbers: "|1,3,15" 
SEXP C_StemLeaf(SEXP x, SEXP scale, SEXP swidth, SEXP atom)
{
    if (TYPEOF(x) != REALSXP || TYPEOF(scale) != REALSXP) 
        error("invalid input");
#ifdef LONG_VECTOR_SUPPORT
    if (IS_LONG_VEC(x))
	    error(_("long vector '%s' is not supported"), "x");
#endif
    int width = asInteger(swidth), n = LENGTH(x);
    if (n == NA_INTEGER) error(_("invalid '%s' argument"), "x");
    if (width == NA_INTEGER) error(_("invalid '%s' argument"), "width");
    double sc = asReal(scale), sa = asReal(atom);
    if (!R_FINITE(sc)) error(_("invalid '%s' argument"), "scale");
    if (!R_FINITE(sa)) error(_("invalid '%s' argument"), "atom");
    stem_leaf(REAL(x), n, sc, width, sa);
    return R_NilValue;
}
```

:::{.notes}
At the C-level, all R objects are stored in a common datatype, the SEXP, or S-expression. All R objects are S-expressions so every C function that you create must return a SEXP as output and take SEXPs as inputs.
:::

## `stem_leaf()`

```{r}
#| eval: false
#| code-line-numbers: "|8,12" 
static Rboolean
stem_leaf(double *x, int n, double scale, int width, double atom)
{
    // <initialise variables>

    R_rsort(x,n);

    if (n <= 1) return FALSE;

    //<more code here>
    
    /* Find the print width of the stem. */

    lo = floor(x[0]*c/mu)*mu;
    hi = floor(x[n-1]*c/mu)*mu;
    ldigits = (lo < 0) ? (int) floor(log10(-(double)lo)) + 1 : 0;
    hdigits = (hi > 0) ? (int) floor(log10((double)hi)): 0;
    ndigits = (ldigits < hdigits) ? hdigits : ldigits;

    /* Starting cell */

    if(lo < 0 && floor(x[0]*c) == lo) lo = lo - mu;
    hi = lo + mu;
    if(floor(x[0]*c+0.5) > hi) {
	      lo = hi;
	      hi = lo + mu;
    }
  // <more code here>
}
```

:::{.notes}
In the same file as C_StemLeaf
:::

## Interfaces / pryr

We've seen `.Call()`. In base R, there's also `.Internal()` and `.Primitive()`

e.g. the source code for `tabulate` includes:

```{.r}
.Internal(tabulate(bin, nbins))
```

We can find the underlying code on GitHub with

```{r}
#| eval: false
pryr::show_c_source(.Internal(tabulate(bin, nbins)))
```

We can also use **pryr** to find the SEXTYPE:

```{r}
pryr::sexp_type(c(8.48, 9.58, 9.96))
```

:::{.notes}
First need to look for their C function name in src/main/names.c and then search the R source code. 
:::

# #66CCBB {background-color="#66CCBB" .center-h .larger150}

# #6CB {background-color="#6CB" .center-h .larger150}

## The original idea

![](images/3-digit-hex-idea.png){fig-align="center" }

## The existing code 

:::{.smaller80}
```{c eval=FALSE}
#| code-line-numbers: "|7,11" 
/* #RRGGBB[AA] String to Internal Color Code */
static rcolor rgb2col(const char *rgb)
{
    unsigned int r = 0, g = 0, b = 0, a = 0; /* -Wall */
    if(rgb[0] != '#')
	      error(_("invalid RGB specification"));
    switch (strlen(rgb)) {
    case 9:
	      a = 16 * hexdigit(rgb[7]) + hexdigit(rgb[8]);
    case 7:
	      r = 16 * hexdigit(rgb[1]) + hexdigit(rgb[2]);
	      g = 16 * hexdigit(rgb[3]) + hexdigit(rgb[4]);
	      b = 16 * hexdigit(rgb[5]) + hexdigit(rgb[6]);
	      break;
    default:
	      error(_("invalid RGB specification"));
    }

    if(strlen(rgb) == 7) 
        return R_RGB(r, g, b);
    else
        return R_RGBA(r, g, b, a);
}
```
:::

## The fix: part 1

:::{.smaller90}
```{c eval=FALSE}
#| code-line-numbers: "9-16|5,13" 
switch (strlen(rgb)) {
case 9:
    a = 16 * hexdigit(rgb[7]) + hexdigit(rgb[8]);
case 7:
    r = 16 * hexdigit(rgb[1]) + hexdigit(rgb[2]);
    g = 16 * hexdigit(rgb[3]) + hexdigit(rgb[4]);
    b = 16 * hexdigit(rgb[5]) + hexdigit(rgb[6]);
    break;
case 5: 
  // Equivalent to 16 * hexdigit(rgb[4]) + hexdigit(rgb[4]);
  a = (16 + 1) * hexdigit(rgb[4]);
case 4:
  r = (16 + 1) * hexdigit(rgb[1]);
  g = (16 + 1) * hexdigit(rgb[2]);
  b = (16 + 1) * hexdigit(rgb[3]);
  break;
default:
    error(_("invalid RGB specification"));
}
```
:::

## The fix: part 2

From
```{c eval=FALSE}
if(strlen(rgb) == 7) 
    return R_RGB(r, g, b);
else
    return R_RGBA(r, g, b, a);
```

to
```{c eval=FALSE}
switch(strlen(rgb)) {
case 7: 
case 4:
    return R_RGB(r, g, b);
default:
    return R_RGBA(r, g, b, a);
}
```

:::{.notes}
There were actually six files we needed to change, including documentation, tests and news
:::

# Learning more {.inverse}

## C study group 

<https://contributor.r-project.org/events/c-study-group-2024/>

- Will run again January--June 2025, details TBC

- Monthly meetings, weekly suggestions

- Work through sessions 1-5 of Harvard's CS50 course

  [cs50.harvard.edu/x](https://cs50.harvard.edu/x)
- R's C API

- Run by R Contribution Working Group (RCWG)

## RCWG

Fosters a larger, more diverse community of contributors to base R.

- [contributor.r-project.org](https://contributor.r-project.org)
- [meetup.com/r-contributors](https://www.meetup.com/r-contributors/)
- [hachyderm.io/@R_Contributors](https://hachyderm.io/@R_Contributors)

## Resources: R's C API

- Deep R: <https://deepr.gagolewski.com/chapter/310-compiled.html>
- Advanced R, Hadley Wickham, (1st edn): <http://adv-r.had.co.nz/C-interface.html>
- Now You C Me, Davis Vaughn: <https://blog.davisvaughan.com/posts/2019-03-02-now-you-c-me>
- Writing R Extensions (Ch 5 and 6): <https://cran.stat.auckland.ac.nz/doc/manuals/r-devel/R-exts.html>
- R internals (Hadley Wickham): <https://github.com/hadley/r-internals>
- R internals (R Core): <https://cran.stat.auckland.ac.nz/doc/manuals/r-devel/R-ints.html>

## Thank you! Questions? {.center-h}

```{r}
#| echo: false
#| eval: false # after running once
library(qrcode)
slides_code <- qr_code("https://ellakaye.github.io/c-for-r-users")
generate_svg(slides_code, "images/slides_qrcode.svg")
```

[ella.m.kaye@warwick.ac.uk](mailto:ella.m.kaye@warwick.ac.uk){.larger125}

[ellakaye.github.io/c-for-r-users](https://ellakaye.github.io/c-for-r-users/#/title-slide){.larger125}

![](images/slides_qrcode.svg){fig-align="center"}

```{=html}
<!-- needs to be last chunk of presentation otherwise creates an extra slide -->
<!-- requires Quarto v1.3 -->
<!-- tint80 for border, tint20 for title -->
<!-- this should hopefully no longer be necessary in a future version of Quarto -->
<!-- https://github.com/quarto-dev/quarto-cli/issues/5038 -->
<style type="text/css">
div.callout-note {
  border-left-color: #00A9CE !important;
}

div.callout-note.callout-style-default .callout-title {
  background-color: #B3E5F0 !important;
}

div.callout-warning {
  border-left-color: #CB333B !important;
}

div.callout-warning.callout-style-default .callout-title {
  background-color: #EEC3C3 !important;
}

div.callout-tip {
  border-left-color: #6DCDB8 !important;
}

div.callout-tip.callout-style-default .callout-title {
  background-color: #D3F0EB !important;
}

div.callout-important {
  border-left-color: #F1BE48 !important;
}

div.callout-important.callout-style-default .callout-title {
  background-color: #FAECC8 !important;
}

div.callout-caution {
  border-left-color: #E87722 !important;
}

div.callout-caution.callout-style-default .callout-title {
  background-color: #F8D5BC !important;
}
</style>
```
